---
import BaseLayout from "@layouts/BaseLayout.astro";
import { getCollection } from 'astro:content'
import { Image } from 'astro:assets'

const categories = await getCollection('categories')

---

<BaseLayout
    title="搜索"
    description="搜索本站文章">

    <section class="mx-auto max-w-[85rem] px-4 py-8 sm:px-6 lg:px-8 mb-10 2xl:max-w-full">
      <!-- 搜索框 -->
      <div class="flex">
        <button id="dropdown-button" data-dropdown-toggle="dropdown" class="flex-shrink-0 z-10 inline-flex items-center py-2.5 px-4 text-sm font-medium text-center text-gray-900 bg-gray-100 border-e-0 border-gray-300 dark:border-gray-700 dark:text-white rounded-s-lg hover:bg-gray-200 focus:ring-4 focus:outline-none focus:ring-gray-300 dark:bg-gray-600 dark:hover:bg-gray-700 dark:focus:ring-gray-800"
        type="button">
          <span id="allCategory" class="w-16 truncate">所有分类</span>
          <svg class="w-2.5 h-2.5 ms-2.5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
          fill="none" viewBox="0 0 10 6">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"
            stroke-width="2" d="m1 1 4 4 4-4" />
          </svg>
        </button>
        <div id="dropdown" class="z-10 hidden bg-white divide-y divide-gray-100 rounded-lg shadow w-52 dark:bg-gray-700">
          <ul class="py-2 text-sm text-gray-700 dark:text-gray-200" aria-labelledby="dropdown-button">
            <a href="#" title="clear" data-category="clear" class="categoryLi">
              <li class="truncate border-b mx-1 rounded-sm border-gray-300 dark:border-gray-600 py-2 px-4 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">
                <button type="button" class="w-4/5 focus:outline-none text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900">Clear</button>
              </li>
            </a>

            {
              categories.map((category) => {
                return (
                <a href="#" title={category.data.title} data-category={category.slug} class="categoryLi">
                  <li class="truncate border-b mx-1 rounded-sm border-gray-300 dark:border-gray-600 py-2 px-4 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white">
                      {category.data.title}
                  </li>
                </a>
                )
              })
            }
          </ul>
        </div>
        <div class="relative w-full">
          <div class="absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none">
            <svg class="w-4 h-4 text-gray-500 dark:text-gray-400" aria-hidden="true"
            xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"
              stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z" />
            </svg>
          </div>
          <input type="search" id="searchBox" class="rounded-r-lg ps-10 block px-2.5 pb-2.5 pt-5 w-full text-sm text-gray-900 bg-gray-50 dark:bg-gray-700 border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer"
          placeholder="" required />
          <label for="searchBox" class="ps-10 absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-4 scale-75 top-4 z-10 origin-[0] start-2.5 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-4 rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto">
            Search what you think
          </label>
          <button type="button" class="absolute top-0 end-0 p-2.5 h-full text-sm font-medium text-white bg-blue-700 rounded-e-lg border border-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
            <svg class="w-4 h-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
            fill="none" viewBox="0 0 20 20">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"
              stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z" />
            </svg>
          </button>
        </div>
      </div>
      <p id="floating_helper_text" class="mt-2 text-xs text-gray-500 dark:text-gray-400">
        按文章标题模糊查询
        <a href="#" class="text-blue-600 dark:text-blue-500">
          搜你所想
        </a>
        😍
      </p>
      <!-- 结果集 -->
      <div id="results" class="mt-12 grid grid-cols-[repeat(auto-fit,minmax(375px,1fr))] gap-8 justify-items-center"></div>
    </section>
   
</BaseLayout>


<script>
  import { type CollectionEntry, getCollection } from 'astro:content'
  import Fuse, { type FuseResult } from 'fuse.js';
  document.addEventListener('astro:page-load', () => {
  let categoryStr = "";
  // 分类按钮渲染
  const btns = document.getElementsByClassName('categoryLi');
  const allCategory = document.getElementById("allCategory");
  for (let value of btns) {
    let category = value.getAttribute("data-category");
    let title = value.getAttribute("title");
    value.addEventListener("click", (e) => {
        console.log("按钮被点击了", category, title);
        if(title === "clear"){
          categoryStr = "";
          allCategory.innerText = "全部分类";
          allCategory.title = "全部分类";
        }else{
          categoryStr = category as string;
          allCategory.innerText = title as string;
          allCategory.title = title as string;
        }
        
    })
  }

  // 搜索对象实例
  interface resultInterface {
    title: string,
    slug: string,
    description?: string,
    tags: Array<string>,
    data: {
      title: string,
      pubDate: Date,
      category: string,
      description: string,
      author: string,
      cardImage: {src: string, alt: string},
      imageShow: {src: string, alt: string},
      tags: Array<string>,
      tagsHtml: string,
    }
  }

  function formatDate(date: Date): string {
    const year = date.getFullYear()
    const month = String(date.getMonth() + 1).padStart(2, '0')
    const day = String(date.getDate()).padStart(2, '0')

    return `${year}/${month}/${day}`
}


  async function search() {
    const options = {
      // isCaseSensitive: false,
      // includeScore: false,
      // shouldSort: true,
      // includeMatches: false,
      // findAllMatches: false,
      // minMatchCharLength: 1,
      // location: 0,
      // threshold: 0.6,
      // distance: 100,
      // useExtendedSearch: false,
      ignoreLocation: true,
      // ignoreFieldNorm: false,
      // fieldNormWeight: 1,
      keys: ["data.title"]
    };
  
    
    const inputBox = document.querySelector<HTMLInputElement>('#searchBox');
      if (inputBox) {
      inputBox.addEventListener('input', async () => {    
        let posts = await getCollection('posts')
        posts = getImagePicture(posts); // 预加载图片
        const fuse = new Fuse(posts, options);
        const pattern = inputBox.value;
        console.log(pattern);
        const results:FuseResult<resultInterface>[] = fuse.search(pattern);
        console.log(results);
        let html = "";
        for (const result of results) {
          // console.log("result",result);
          
          html += (`
          <div class="group flex flex-col justify-between bg-white pt-10 pb-4 sm:py-18 rounded-lg shadow-lg dark:bg-neutral-700/60 dark:text-neutral-100 hover:shadow-lg"> 
            <div style="cursor: pointer;" name="mainCard" myurl="/posts/${result.item.slug}" class="mx-auto max-w-5xl px-4 lg:px-6"> 
              <div class="flex items-center gap-x-3 text-xs mb-4">
                <time datetime="2020-03-16" class="text-gray-500">⏰${formatDate(result.item.data.pubDate)}</time>
                <span class="hover:bg-orange-500 hover:text-white dark:hover:text-white dark:hover:bg-orange-500 inline-flex items-center gap-x-1.5 rounded-full bg-neutral-200 px-2 py-1.5 text-xs font-medium text-neutral-700 outline-none focus:outline-none focus-visible:outline-none focus-visible:ring dark:bg-neutral-700/60 dark:text-neutral-300">
                    <a href="/categories/${result.item.data.category}" >🏷️${result.item.data.category}</a>
                </span>
                </div>
                <div class="mx-auto max-w-2xl lg:mx-0">
                  <a href="/posts/${result.item.slug}" class=" dark:text-neutral-300 hover:text-orange-500 dark:hover:text-orange-500 text-1xl font-bold tracking-tight text-gray-900 sm:text-2xl">
                    <div class="flex items-center">
                        <Image
                            class="w-8 h-8 rounded-full me-2 start-0 top-0 size-full object-cover transition duration-600 group-hover:scale-125"
                            src=${result.item.data.imageShow}
                            alt=${result.item.data.title}
                            format="webp"
                            decoding="async"
                            loading="lazy"
                        />
                        <h5>${result.item.data.title}</h5>
                    </div>
                    <p class="mt-3 text-lg leading-8 text-gray-600 dark:text-neutral-400">${result.item.data.description}</p>
                    
                  </a>
                </div>
              </div>
              <div class="mt-2 px-4">
                <hr/>
                ${result.item.data.tagsHtml}
              </div>
          </div>
          `);
        }

        const res = document.querySelector('#results')
        if (res)
          res.innerHTML = html; // 更新结果
        
        // 监听页面切换事件
        document.addEventListener('astro:after-swap', search);

        // 监听卡片点击事件
        const mainCards = document.getElementsByName('mainCard')
        mainCards.forEach(function (element) {
          element.addEventListener('click', function (e) {
            const myurl = element?.getAttribute('myurl')
            window.location.href = myurl as string;
          });
        });
        
      })
    }
  }
  search();


  /**
   * 获取图片地址
   * @param posts  CollectionEntry<'posts'>[]
   */
  function getImagePicture(posts: CollectionEntry<'posts'>[]) {
    // console.log("DEV", import.meta.env);
    console.log(posts);
    posts.map(async post => {
      if(import.meta.env.DEV){ // dev 环境
        post.data.imageShow = "/public/images/postpicture/"+post.slug+'.webp'
      }else{ // prod 环境
        post.data.imageShow = "/images/postpicture/"+post.slug+'.webp'
      }
      // 生成 tagsStr
      post.data.tagsHtml = getTagsHtml(post.data.tags??[]);
    })

    // 
    console.log("categoryStr",categoryStr);
    let filterPosts = posts;
    if(categoryStr){
        console.log("categoryStr",categoryStr);
        filterPosts = posts.filter((p) => p.data.category === categoryStr);
        console.log("filter分类",posts);
    }

    return filterPosts;
  }


  /**
   * 生成 tagsStr:string 标签
   * @param tags 
   * @returns 
   */
  function getTagsHtml(tags:Array<string>){
    let html = ""
    for (const tag of tags) {
      html += (`<span class="bg-orange-300 group-hover:bg-orange-400 text-white text-xs font-medium ms-2 px-2.5 py-0.5 rounded dark:bg-orange-500 dark:group-hover:bg-orange-700">${tag}</span>`)
    }
    return html;
  }

});
  
  

</script>